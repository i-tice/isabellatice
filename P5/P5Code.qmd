---
title: "P5: Mode Choice"
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor: visual
---

## Load libraries

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(here)
library(knitr)
library(srvyr)
library(tidycensus)
library(jtools)
library(officer)
library(flextable)
```

## Load dataset

```{r}
trips <- here("data",
              "NHTS",
              "trippub.csv") |>
  read_csv(show_col_types = FALSE)
```

```{r}
people <- here("data",
               "NHTS",
               "perpub.csv") |>
  read_csv(show_col_types = FALSE)
```

## Merge dataset

```{r}
people_devices <- people %>%
  select(HOUSEID, PERSONID,
         W_CANE, W_CHAIR, W_CRUTCH, W_DOG,
         W_MTRCHR, W_SCOOTR, W_WHCANE, W_WLKR)

data <- trips %>%
  left_join(people_devices, by = c("HOUSEID", "PERSONID"))
```

## Filter sample

### Filter for selected trip purpose

```{r}

visit_trips <- data |>
  filter(WHYTO == "11" |
           WHYFROM == "11")

```

### Filter for selected population

```{r}
device <- c("W_CANE", "W_CHAIR", "W_CRUTCH", "W_DOG", "W_MTRCHR", "W_SCOOTR", "W_WHCANE", "W_WLKR")

device_visit_trips <- visit_trips |>
  filter((WHYTO == "11" | WHYFROM == "11"),
         rowSums(across(all_of(device), ~ .x > 0), na.rm = TRUE) > 0)

```

### Filter for trip distance

```{r}

short_device_visit_trips <- device_visit_trips |>
  filter(TRPMILAD < 1.5)

nrow(short_device_visit_trips)
```

## Generate outcome variable

```{r}

short_device_visit_trips <- short_device_visit_trips |>
  mutate(walk = TRPTRANS == "01")
```

```{r, message=FALSE}

short_device_visit_trips |>
  mutate(Mode = factor(ifelse(walk, "Walk", "Other mode"),
                       levels = c("Walk", "Other mode"))) |>
  group_by(Mode) |>
  summarise(`Number of trips` = n()) |>
  mutate(`Percent of trips` = 
           paste0(round(100*`Number of trips`/sum(`Number of trips`)), "%")) |>
  kable()
```

```{r, message=FALSE}

short_device_visit_trips |>
  as_survey_design(weights = WTTRDFIN) |>
  mutate(Mode = factor(ifelse(walk, "Walk", "Other mode"),
                       levels = c("Walk", "Other mode"))) |>
  group_by(Mode) |>
  survey_tally(vartype = "ci") |>
  mutate(`Estimated percent of trips` = 
           paste0(round(100*n/sum(n)),"%"),
         `Lower estimate (95% confidence)` = 
           paste0(round(100*n_low/sum(n)),"%"),
         `Upper estimate (95% confidence)` = 
           paste0(round(100*n_upp/sum(n)),"%")) |>
  select(Mode,
         `Estimated percent of trips`,
         `Lower estimate (95% confidence)`,
         `Upper estimate (95% confidence)`) |>
  kable()
```

## Choose predictor variables

### Distance

```{r}

ggplot(short_device_visit_trips) +
  geom_histogram(aes(x = TRPMILES),
                 color = "gray",
                 fill = "cornsilk",
                 bins = 40) +
  scale_x_continuous(name = "Trip distance (miles)") +
  scale_y_continuous(name = "Number of trips in sample") +
  theme_minimal()
```

```{r}

sample_trips <- short_device_visit_trips |>
  filter(TRPMILES >=0)

ggplot(sample_trips) +
  geom_histogram(aes(x = TRPMILES),
                 color = "gray",
                 fill = "cornsilk",
                 binwidth = 0.1) +
  scale_x_continuous(name = "Trip distance (miles)",
                     breaks = seq(0, 1.5, by=0.1)) +
  scale_y_continuous(name = "Number of trips in sample") +
  theme_minimal()
```

### Age

```{r}

ggplot(sample_trips) +
  geom_histogram(aes(x = R_AGE),
                 color = "gray",
                 fill = "cornsilk",
                 binwidth = 1) +
  scale_x_continuous(name = "Traveler's age (years)",
                     breaks = seq(0, 1.5, by=0.1)) +
  scale_y_continuous(name = "Number of trips in sample") +
  theme_minimal()
```

### Density

```{r}
sample_trips <- sample_trips |>
  filter(DBPPOPDN > 0)

density_values <- c(50, 300, 750, 1500, 3000, 7000, 17000, 30000)

ggplot(sample_trips) +
  geom_histogram(aes(x = DBPPOPDN),
                 color = "gray",
                 fill = "cornsilk",
                 bins = 30) +
  scale_x_continuous(breaks = density_values,
                 labels = density_values,
                 transform = "log",
                 name = paste0("Population density of destination\n",
                               "block group (people per sq-mi)")) +
  scale_y_continuous(name = "Number of trips in sample") +
  theme_minimal()
```

### Gender

```{r}

sample_trips |>
  group_by(R_SEX) |>
  summarise(`Number of trips` = n())
```

```{r}

sample_trips <- sample_trips |>
  filter(R_SEX != "-7") |>
  mutate(female = R_SEX == "02")
```

### Vehicle availability

```{r}

sample_trips <- sample_trips |>
  mutate(zero_veh = HHVEHCNT ==0)
```

### Final sample size

```{r}
nrow(sample_trips)
```

## Estimate model

```{r}
model_data <- sample_trips %>%
  filter(!is.na(zero_veh),
         !is.na(STRTTIME)) %>%
  mutate(
    # Convert STRTTIME to numeric first
    STRTTIME = as.numeric(STRTTIME),
    
    # Safely create START_HOUR
    START_HOUR = floor(STRTTIME / 100) + (STRTTIME %% 100) / 60,
    
    # Define time of day: Morning, Afternoon, Night
    time_of_day = case_when(
      START_HOUR >= 6 & START_HOUR < 12 ~ "Morning",
      START_HOUR >= 12 & START_HOUR < 18 ~ "Afternoon",
      TRUE ~ "Night"
    ),
    
    # Factor for modeling (optional: set Morning as reference)
    time_of_day = factor(time_of_day, levels = c("Morning", "Afternoon", "Night"))
  )


```

```{r}
model <- glm(walk ~ 
               TRPMILES +
               R_AGE +
               DBPPOPDN +
               female +
               time_of_day +
               zero_veh,
             data = model_data,
             family = "binomial")

coeff_labels <- c(
  "Trip distance (miles)" = "TRPMILES",
  "Age (years)" = "R_AGE",
  "Block-group population density at destination" = "DBPPOPDN",
  "Female" = "femaleTRUE",
  "Trip Start Time (Afternoon, ref: Morning)" = "time_of_dayAfternoon",
  "Trip Start Time (Night, ref: Morning)" = "time_of_dayNight",
  "Zero-vehicle household" = "zero_vehTRUE"
)
export_summs(model, 
             robust = "HC3", 
             coefs = coeff_labels,
             error_format = "(p = {p.value})",
             error_pos = "right")
```

```{r, eval=FALSE}


export_summs(model, 
             robust = "HC3", 
             coefs = coeff_labels,
             error_format = "(p = {p.value})",
             error_pos = "same",
             to.file = "Word",
             file.name = here("P5",
                              "model-result.docx"))
```

```{r}

effect_plot(model, pred = "TRPMILES", interval = TRUE) +
  scale_x_continuous(name = "Trip distance (miles)",
                     breaks = seq(0, 1.5, by  =0.1)) +
  scale_y_continuous(name = "Probabilitity of walking",
                     breaks = breaks <- seq(0, 0.8, by = 0.1),
                     labels = paste0(breaks*100, "%"))
```

```{r}
effect_plot(model = model, pred = "female", interval = TRUE) +
  scale_x_discrete(
    name = "Traveler's Gender",
    labels = c("Male", "Female")
  ) +
  scale_y_continuous(
    name = "Probability of walking for a particular trip",
    breaks = seq(0, 0.8, by = 0.1),
    labels = scales::percent_format(accuracy = 1)
  ) +
  theme_minimal()

  
```

```{r}
summary(model)
```

```{r}
write.csv(model_summary, "model_summary.csv", row.names = FALSE)

```
